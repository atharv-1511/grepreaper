% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grep_read.r
\name{grep_read}
\alias{grep_read}
\title{Efficiently read and filter lines from files using grep}
\usage{
grep_read(files = NULL, path = NULL, file_pattern = NULL,
  pattern = "", invert = FALSE, ignore_case = TRUE,
  fixed = FALSE, show_cmd = FALSE, recursive = FALSE,
  word_match = FALSE, show_line_numbers = FALSE,
  only_matching = FALSE, count_only = FALSE, nrows = Inf,
  skip = 0, header = TRUE, col.names = NULL,
  include_filename = NULL, search_column = NULL, show_progress = FALSE, ...)
}
\arguments{
\item{files}{Character vector of file paths to read.}

\item{path}{Optional. Directory path to search for files.}

\item{file_pattern}{Optional. A pattern to filter filenames when using the
  \code{path} argument. Passed to \code{list.files}.}

\item{pattern}{Pattern to search for within files (passed to grep).}

\item{invert}{Logical; if TRUE, return non-matching lines.}

\item{ignore_case}{Logical; if TRUE, perform case-insensitive matching (default: TRUE).}

\item{fixed}{Logical; if TRUE, pattern is a fixed string, not a regular
  expression.}

\item{show_cmd}{Logical; if TRUE, return the grep command string instead of
  executing it.}

\item{recursive}{Logical; if TRUE, search recursively through directories.}

\item{word_match}{Logical; if TRUE, match only whole words.}

\item{show_line_numbers}{Logical; if TRUE, include line numbers from source
  files. Headers are automatically removed and lines renumbered.}

\item{only_matching}{Logical; if TRUE, return only the matching part of the
  lines.}

\item{count_only}{Logical; if TRUE, return only the count of matching lines.}

\item{nrows}{Integer; maximum number of rows to read.}

\item{skip}{Integer; number of rows to skip.}

\item{header}{Logical; if TRUE, treat first row as header.}

\item{col.names}{Character vector of column names.}

\item{include_filename}{Logical; if TRUE, include source filename as a column.}

\item{search_column}{Character; name of specific column to search in (if NULL, searches all columns).}

\item{show_progress}{Logical; if TRUE, show progress indicators.}

\item{...}{Additional arguments passed to \code{fread}.}
}
\value{
A data.table with different structures based on the options:
  \itemize{
    \item{Default: Data columns with original types preserved}
    \item{\code{show_line_numbers=TRUE}: Additional 'line_number' column (integer) with source file line numbers}
    \item{\code{include_filename=TRUE}: Additional 'source_file' column (character)}
    \item{\code{only_matching=TRUE}: Single 'match' column with matched substrings}
    \item{\code{count_only=TRUE}: 'source_file' and 'count' columns}
    \item{\code{show_cmd=TRUE}: Character string containing the grep command}
  }
}
\description{
Provides a suite of functions for efficient file reading and pattern matching using 
the power of 'grep' at the command line. Enables counting matches, extracting matching lines,
finding files with matches, and viewing context lines around matches. Supports reading and 
aggregating data from multiple files, searching with regular expressions or fixed patterns,
and handling large files efficiently.
}
\details{
When searching for literal strings (not regex patterns), set
  \code{fixed = TRUE} to avoid regex interpretation. For example, searching for
  "3.94" with \code{fixed = FALSE} will match "3894" because "." is a regex
  metacharacter.

Header rows are automatically handled:
  \itemize{
    \item{With \code{show_line_numbers=TRUE}: Headers (line_number=1) are removed and
      lines renumbered}
    \item{Without line numbers: Headers matching column names are removed}
    \item{Empty rows and all-NA rows are automatically filtered out}
  }
}
\examples{
\dontrun{
# Basic usage - search for "error" in CSV files
result <- grep_read(files = "*.csv", pattern = "error")
print(result)

# Search with line numbers
result_with_lines <- grep_read(files = "data.csv", pattern = "warning", 
                              show_line_numbers = TRUE)
print(result_with_lines)

# Count matches only
counts <- grep_read(files = "*.csv", pattern = "error", count_only = TRUE)
print(counts)

# Search in specific column
result_col <- grep_read(files = "data.csv", pattern = "critical", 
                       search_column = "status")
print(result_col)

# Multiple files with filename included
result_multi <- grep_read(files = c("file1.csv", "file2.csv"), 
                         pattern = "error", include_filename = TRUE)
print(result_multi)
}

# Simple example that doesn't require external files
\dontshow{
# This example will run during package checks
result <- grep_read(files = NULL, pattern = "", show_cmd = TRUE)
}
}
\seealso{
\code{\link{build_grep_cmd}} for building grep commands,
\code{\link{safe_system_call}} for executing system commands safely,
\code{\link{split.columns}} for parsing grep output
}
